@page "/"
@using System.Collections.Generic

<h1 style="text-align:center">The Game is ON!</h1>

<div>
    You: X 
</div>

<div>
    Computer: O
</div>

@if(winner != null){
    <div>  
        @winner won!
    </div>
}else{
    <div>  
        @turn turn
    </div>
}

<div style="width:310px; margin:50px auto">
    <table class="table game-board">
        @{
            var rowIndex = -1;
            var colIndex = -1;
        }
        @foreach (var row in board)
        {
            rowIndex++;
            colIndex = -1;
        <tr>
            @foreach (var col in row)
            {
                colIndex++;
                @switch (col)
                {
                    case Option.Cross:
                        <td>X</td>;
                        break;
                    case Option.Nought:
                        <td>O</td>;
                        break;
                    default:
                        var r = rowIndex;
                        var c = colIndex;
                        <td @onclick="() => play(r, c)">&nbsp;</td>
                        break;
                }
            }
        </tr>    
        }
    </table>
</div>
@code {
    enum Player
    {
        Player1,
        Player2
    }

    enum Option
    {
        Empty,
        Cross,
        Nought
    }

  Option[][] board = new Option[3][] {
      new Option[3],
      new Option[3],
      new Option[3]
  };

  Player turn = Player.Player1;
  Dictionary<Player,Option>  playerOption = new Dictionary<Player,Option>{
      [Player.Player1] = Option.Cross,
      [Player.Player2] = Option.Nought
  };

  Player? winner = null;

  void play(int row, int col)
  {
      if (winner != null){
          return;  // game over
      }

      board[row][col] = playerOption[turn];
      checkWinning();

      if(winner == null){
        rotateTurn();
      }
  }

  void rotateTurn()
  {
      if (turn == Player.Player1){
          turn = Player.Player2;
          return;
      }

      turn = Player.Player1;
  }

  void checkWinning(){
      // horizontals
    foreach(var row in board){
        if (row[0] != Option.Empty && 
            row[0] == row[1] && 
            row[1] == row[2]){
                winner = playerOption.First(p => p.Value == row[0]).Key;
                return;
        }
    }

    // verticals
    for(var colIndex=0; colIndex< 3; colIndex++){
        if (board[0][colIndex] != Option.Empty && 
            board[0][colIndex] == board[1][colIndex] && 
            board[1][colIndex] == board[2][colIndex]){
                winner = playerOption.First(p => p.Value == board[0][colIndex]).Key;
                return;
        }
    }

    // diagonal - top left to bottom right
    if(board[0][0] != Option.Empty && board[0][0] == board[1][1] && board[1][1] == board[2][2]){
        winner = playerOption.First(p => p.Value == board[0][0]).Key;
        return;
    }
    
    // diagonal - top right to bottom left
    if(board[0][2] != Option.Empty && board[0][2] == board[1][1] && board[1][1] == board[2][0]){
        winner = playerOption.First(p => p.Value == board[0][0]).Key;
        return;
    }
  }
}
