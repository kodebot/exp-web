@page "/"
@using TicTacToe.Core;

<style>
    .board{
        width: 310px;
        margin: 50px auto;
    }

    .stats-card{
        width: 310px;
        margin: 50px auto;
        text-transform: uppercase;
        font-family: Verdana, Geneva, Tahoma, sans-serif;
        font-weight: bold;
    }

    .in-progress{
        background-color: peru !important;
    }

    .you-won{
        background-color: mediumseagreen !important;
    }

    .you-lost{
        background-color: indianred !important;
    }
</style>

<div class="card bg-secondary text-center stats-card">
  <ul class="list-group list-group-flush">
    <li class="list-group-item bg-secondary text-white"> You: X </li>
    <li class="list-group-item bg-secondary text-white">Computer: O</li>
    <li class="list-group-item bg-secondary text-white @GetStatusStyle()"> 
        <div>  
            @(game.Status switch
            {
                GameStatus.Player1Won => "You won!",
                GameStatus.Player2Won => "You lost :(",
                GameStatus.Player1Turn => "You turn",
                GameStatus.Player2Turn => "Computer's turn",
                GameStatus.Tie => "Game Tie",
                _ => "New"
            })
        </div>
    </li>
  </ul>
</div>

<div class="text-center">
    <button class="btn btn-danger" @onclick="Restart"> Restart</button>
</div>

<div class="board">
    <table>
        @foreach (var row in game.Board.Rows)
        {
        <tr>
            @foreach (var cell in row)
            {
                <td>
                    <Cell Data="cell" OnCellSelected="CellSelected">
                    </Cell>
                </td>
            }
        </tr>    
        }
    </table>
</div>

<div>
    0. allow restart
    1. strike across winning cells
    2. use cartoony fonts
    3. use random pictures for noughts and crosses
    4. display when the result is tie (display the game is over and break the infinite loop)
</div>
@code {
  Game game = new Game();

  private void Restart()
  {
      game = new Game();
  }

  private string GetStatusStyle()
  {
      return game.Status switch{
          GameStatus.Player1Won => "you-won",
          GameStatus.Player2Won => "you-lost",
          _ => "in-progress"
      };
  }

  private async Task CellSelected(Coordinates coords)
  {
      // ignore any selection when it is not Player1's turn
      if (game.Status == GameStatus.Player1Turn){
          await game.Play(coords.X, coords.Y);
      }
  }
}
